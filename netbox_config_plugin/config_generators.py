from abc import ABC, abstractmethod

from django_rq import job
from django.conf import settings
from napalm import get_network_driver

from .models import ConfigJob


class NoConfigGenerator(Exception):
    """
    Raised when no Config Generator exception is available for a Device.
    """
    pass


class ConfigGenerator(ABC):

    @abstractmethod
    def generate(self, device) -> str:
        """
        Generates a Config for the given Device.
        """
        pass


def generate_config(config_job: ConfigJob):
    """
    A wrapper function that enques the config generation function.
    """

    return _generate_config.delay(config_job)


@job("default")
def _generate_config(config_job: ConfigJob):
    """
    This function generates the device Config for a ConfigJob and updates
    the ConfigJob object accordingly.
    """
    config_job.log_config_info("Starting Config Job")

    generator = settings.PLUGINS_CONFIG["netbox_config_plugin"]["CONFIG_GENERATOR"](config_job.device)

    config_job.config_status = config_job.JobStatus.RUNNING
    config_job.full_clean()
    config_job.save()

    try:
        config_job.log_config_info("generating config")
        config_job.config = generator.generate(config_job.device)
        config_job.save()
    except Exception as e:
        config_job.log_config_critical(f"Exception during Config generation: { e }")
        config_job.config_status = config_job.JobStatus.FAILED
    else:
        config_job.log_config_info("config generation successful")
        config_job.config_status = config_job.JobStatus.COMPLETED

    config_job.full_clean()
    config_job.save()


def compare_config(config_job):
    """
    A wrapper function that enqueues the config compare function
    """
    return _compare_config.delay(config_job)


@job("default")
def _compare_config(config_job):
    """
    This function compares the configuration generated by the ConfigJob with
    the configuration on the device.
    """

    assert config_job.config_status == config_job.JobStatus.COMPLETED, "Config Generation not completed. Cannot compare."
    config_job.compare_status = config_job.JobStatus.RUNNING
    config_job.save()

    try:
        driver_name, args, kwargs = settings.PLUGINS_CONFIG["netbox_config_plugin"]["CONNECTION_OPTIONS"](config_job.device)

        driver = get_network_driver(driver_name)
        device = driver(*args, **kwargs)
        config_job.log_compare_info("connecting to device")
        device.open()

        config_job.log_compare_info("loading candidate config")
        device.load_replace_candidate(config=config_job.config)
        config_job.log_compare_info("comparing config")
        diff = device.compare_config()
        config_job.diff = diff
        config_job.log_compare_info("compared config.")
        config_job.save()

        device.discard_config()
        config_job.log_compare_info("discarded candidate config.")
        config_job.save()
    except Exception as e:
        config_job.log_compare_error(f"An Exception occured during config compare: { e }")
        config_job.compare_status = config_job.JobStatus.FAILED
        config_job.save()
    else:
        config_job.log_compare_info("config compare successful.")
        config_job.compare_status = config_job.JobStatus.COMPLETED
        config_job.save()
    finally:
        try:
            device.close()
        except Exception as e:
            config_job.log_compare_error(f"An Exception occured while closing the connection: { e }")
            config_job.compare_status = config_job.JobStatus.FAILED
            config_job.save()


def deploy_config(config_job):
    """
    A wrapper function that enqueues the config deployment function.
    """
    return _deploy_config.delay(config_job)


@job("default")
def _deploy_config(config_job):

    assert config_job.compare_status == config_job.JobStatus.COMPLETED, "Config Comparison not completed. Cannot deploy."
    config_job.deployment_status = config_job.JobStatus.RUNNING
    config_job.save()

    try:
        driver_name, args, kwargs = settings.PLUGINS_CONFIG["netbox_config_plugin"]["CONNECTION_OPTIONS"](config_job.device)

        driver = get_network_driver(driver_name)
        device = driver(*args, **kwargs)
        config_job.log_deployment_info("connecting to device")
        config_job.save()
        device.open()

        config_job.log_deployment_info("loading candidate config")
        device.load_replace_candidate(config=config_job.config)
        config_job.save()

        config_job.log_deployment_info("committing candidate config.")
        config_job.save()
        device.commit_config()
        config_job.log_deployment_info("committed candidate config.")
        config_job.save()

    except Exception as e:
        config_job.log_deployment_error(f"An Exception occured during config deployment: { e }")
        config_job.deployment_status = config_job.JobStatus.FAILED
        config_job.save()
    else:
        config_job.log_deployment_info("config deployment successful.")
        config_job.deployment_status = config_job.JobStatus.COMPLETED
        config_job.save()
    finally:
        try:
            device.close()
        except Exception as e:
            config_job.log_deployment_error(f"An Exception occured while closing the connection: { e }")
            config_job.deployment_status = config_job.JobStatus.FAILED
            config_job.save()
